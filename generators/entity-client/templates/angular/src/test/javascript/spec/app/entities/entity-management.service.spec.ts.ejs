<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_
const tsKeyId = pkData.map(pk => pk.field.tsTestValue).join(', ');
_%>
/* tslint:disable max-line-length */
import { TestBed, getTestBed } from '@angular/core/testing';
import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { of } from 'rxjs';
import { take, map } from 'rxjs/operators';
<%_ if (fieldsContainLocalDate) { _%>
import { DATE_FORMAT } from 'app/shared/constants/input.constants';
import { DatePipe } from '@angular/common';
<%_ } _%>
import { <%= entityAngularName %>Service } from 'app/entities/<%= entityFolderName %>/<%= entityFileName %>.service';
import { I<%= entityAngularName %>, <%= entityAngularName %>, <%_ const enumsAlreadyDeclared = [];
fields.forEach(field => {
if (field.fieldIsEnum && !enumsAlreadyDeclared.includes(field.fieldType)) {
    enumsAlreadyDeclared.push(field.fieldType); _%>
<%=field.fieldType%>,
<%_ }
}) _%>
} from 'app/shared/model/<%= entityModelFileName %>.model';

describe('Service Tests', () => {

    describe('<%= entityAngularName %> Service', () => {
        let injector: TestBed;
        let service: <%= entityAngularName %>Service;
        let httpMock: HttpTestingController;
        let elemDefault: I<%= entityAngularName %>;
        let expectedResult;
        <%_ if (fieldsContainDate) { _%>
        let currentDate: Date;
            <%_ if (fieldsContainLocalDate) { _%>
        let datePipe: DatePipe;
            <%_ } _%>
        <%_ } _%>
        beforeEach(() => {
            TestBed.configureTestingModule({
                imports: [HttpClientTestingModule],
<%_ if (fieldsContainLocalDate) { _%>
                providers: [DatePipe]
<%_ } _%>
            });
            expectedResult = {};
            injector = getTestBed();
            service = injector.get(<%= entityAngularName %>Service);
            httpMock = injector.get(HttpTestingController);
            <%_ if (fieldsContainDate) { _%>
            currentDate = new Date();
                <%_ if (fieldsContainLocalDate) { _%>
            datePipe = injector.get(DatePipe);
                <%_ } _%>
            <%_ } _%>

            elemDefault = new <%= entityAngularName %>(<%- tsVariables.map(ts =>ts.tsTestValue).join(', ') %>)
        });

        describe('Service methods', () => {
            it('should find an element', async () => {
                const returnedFromService = Object.assign({
<%_ fields.forEach((field) => {
    const fieldType = field.fieldType; _%>
    <%_ if (['LocalDate'].includes(fieldType)) { _%>
                    <%= field.fieldName%>: datePipe.transform(currentDate, DATE_FORMAT),
    <%_ } else if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
                    <%= field.fieldName%>: currentDate.toISOString(),
    <%_ } _%>
<%_ }) _%>
                }, elemDefault);
                service
                    .find(<%- tsKeyId %>)
                    .pipe(take(1)).subscribe(resp => expectedResult = resp);

                const req  = httpMock.expectOne({ method: 'GET' });
                req.flush(returnedFromService);
                expect(expectedResult).toMatchObject({body: elemDefault});
            });

            it('should create a <%= entityAngularName %>', async () => {
                const returnedFromService = Object.assign({
<%_ if (pkType === 'String') { _%>
                    id: 'ID',
<%_ } else { _%>
                    id: 0,
<%_ } _%>
<%_ fields.forEach((field) => {
    const fieldType = field.fieldType; _%>
    <%_ if (['LocalDate'].includes(fieldType)) { _%>
                    <%= field.fieldName%>: datePipe.transform(currentDate, DATE_FORMAT),
    <%_ } else if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
                    <%= field.fieldName%>: currentDate.toISOString(),
    <%_ } _%>
<%_ }) _%>
                }, elemDefault);
                const expected = Object.assign({
<%_ fields.forEach((field) => {
    const fieldType = field.fieldType; _%>
    <%_ if (['LocalDate'].includes(fieldType)) { _%>
                    <%= field.fieldName%>: currentDate,
    <%_ } else if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
                    <%= field.fieldName%>: currentDate,
    <%_ } _%>
<%_ }) _%>
                }, returnedFromService);
                service
                    .create(new <%= entityAngularName %>(null))
                    .pipe(take(1)).subscribe(resp => expectedResult = resp);
                const req  = httpMock.expectOne({ method: 'POST' });
                req.flush(returnedFromService);
                expect(expectedResult).toMatchObject({body: expected});
            });

            it('should update a <%= entityAngularName %>', async () => {
                const returnedFromService = Object.assign({
<%_ fields.forEach((field) => {
    const fieldType = field.fieldType; _%>
    <%_ if (fieldType === 'Boolean') { _%>
                    <%= field.fieldName%>: true,
    <%_ } else if (['Integer', 'Long', 'Float', 'Double', 'BigDecimal'].includes(fieldType)) { _%>
                    <%= field.fieldName%>: 1,
    <%_ } else if (fieldType === 'String' || fieldType === 'UUID') { _%>
                    <%= field.fieldName%>: 'BBBBBB',
    <%_ } else if (['LocalDate'].includes(fieldType)) { _%>
                    <%= field.fieldName%>: datePipe.transform(currentDate, DATE_FORMAT),
    <%_ } else if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
                    <%= field.fieldName%>: currentDate.toISOString(),
    <%_ } else { _%>
                    <%= field.fieldName%>: 'BBBBBB',
    <%_ } _%>
<%_ }) _%>
                }, elemDefault);

                const expected = Object.assign({
<%_ fields.forEach((field) => {
    const fieldType = field.fieldType; _%>
    <%_ if (['LocalDate'].includes(fieldType)) { _%>
                    <%= field.fieldName%>: currentDate,
    <%_ } else if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
                    <%= field.fieldName%>: currentDate,
    <%_ } _%>
<%_ }) _%>
                }, returnedFromService);
                service
                    .update(expected)
                    .pipe(take(1)).subscribe(resp => expectedResult = resp);
                const req  = httpMock.expectOne({ method: 'PUT' });
                req.flush(returnedFromService);
                expect(expectedResult).toMatchObject({body: expected});
            });

            it('should return a list of <%= entityAngularName %>', async () => {
                const returnedFromService = Object.assign({
<%_ fields.forEach((field) => {
    const fieldType = field.fieldType; _%>
    <%_ if (fieldType === 'Boolean') { _%>
                    <%= field.fieldName%>: true,
    <%_ } else if (['Integer', 'Long', 'Float', 'Double', 'BigDecimal'].includes(fieldType)) { _%>
                    <%= field.fieldName%>: 1,
    <%_ } else if (fieldType === 'String' || fieldType === 'UUID') { _%>
                    <%= field.fieldName%>: 'BBBBBB',
    <%_ } else if (['LocalDate'].includes(fieldType)) { _%>
                    <%= field.fieldName%>: datePipe.transform(currentDate, DATE_FORMAT),
    <%_ } else if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
                    <%= field.fieldName%>: currentDate.toISOString(),
    <%_ } else { // (fieldType === 'byte[]' || fieldType === 'ByteBuffer') && fieldTypeBlobContent === 'any' || (fieldType === 'byte[]' || fieldType === 'ByteBuffer') && fieldTypeBlobContent === 'image' || fieldType === 'LocalDate' _%>
                    <%= field.fieldName%>: 'BBBBBB',
    <%_ } _%>
<%_ }) _%>
                }, elemDefault);
                const expected = Object.assign({
<%_ fields.forEach((field) => {
    const fieldType = field.fieldType; _%>
    <%_ if (['LocalDate'].includes(fieldType)) { _%>
                    <%= field.fieldName%>: currentDate,
    <%_ } else if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
                    <%= field.fieldName%>: currentDate,
    <%_ } _%>
<%_ }) _%>
                }, returnedFromService);
                service
                    .query(expected)
                    .pipe(
                        take(1),
                        map(resp => resp.body)
                    ).subscribe(body  => expectedResult = body);
                const req  = httpMock.expectOne({ method: 'GET' });
                req.flush([returnedFromService]);
                httpMock.verify();
                expect(expectedResult).toContainEqual(expected);
            });

            it('should delete a <%= entityAngularName %>', async () => {
                const rxPromise = service
                    .delete(<%- tsKeyId %>).subscribe(resp => expectedResult = resp.ok);

                const req  = httpMock.expectOne({ method: 'DELETE' });
                req.flush({ status: 200 });
                expect(expectedResult);
            });
        });

        afterEach(() => {
            httpMock.verify();
        });
    });
});
