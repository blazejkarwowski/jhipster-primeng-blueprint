<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
import { Component, OnInit, OnDestroy<%_ if (pagination !== 'no') { _%>, AfterViewInit, ViewChild<% } %> } from '@angular/core';
import { HttpErrorResponse, <%_ if (pagination !== 'no') { _%>HttpHeaders, <% } %>HttpResponse } from '@angular/common/http';
<%_ if (pagination === 'pagination' || pagination === 'pager') { _%>
import { ActivatedRoute, Router } from '@angular/router';
<%_ } else if (searchEngine === 'elasticsearch') { _%>
import { ActivatedRoute } from '@angular/router';
<%_ } _%>
import { Subscription } from 'rxjs';
import { filter, map<%_ if (pagination !== 'no') { _%>, debounceTime<%_ } _%> } from 'rxjs/operators';
import { JhiEventManager, JhiAlertService<% if (fieldsContainBlob) { %>, JhiDataUtils<% } %> } from 'ng-jhipster';
<%_
let enumOptions = '';
if ( jpaMetamodelFiltering) {
    const enumsAlreadyDeclared = [];
    fields.forEach(field => {
        if (field.fieldIsEnum && !enumsAlreadyDeclared.includes(field.fieldType)) {
            enumsAlreadyDeclared.push(field.fieldType);
            field.fieldTypeUnderscoreCapitalized = _.snakeCase(field.fieldType).toUpperCase();
            enumOptions = fields.filter(f => f.fieldIsEnum).map(f => f.fieldTypeUnderscoreCapitalized + '_ARRAY').join(', ');
        }
    });
} _%>
import { I<%= entityAngularName %><%= enumOptions ? ', ' + enumOptions : '' %> } from 'app/shared/model/<%= entityModelFileName %>.model';
<%_ if (pagination !== 'no') { %>
import { ITEMS_PER_PAGE, lazyLoadEventToQueryParams } from 'app/shared';
<%_ } _%>
import { <%= entityAngularName %>Service } from './<%= entityFileName %>.service';
import { ConfirmationService<%_ if (pagination !== 'no') { _%>, LazyLoadEvent<% } %> } from 'primeng/api';
import { TranslateService } from '@ngx-translate/core';
<%_ if (pagination !== 'no') { %>
import { Table } from 'primeng/table';
import { flatten, unflatten } from 'flat';
<%_ } _%>
<%_ if(jpaMetamodelFiltering && fields.some(f => f.fieldType === 'LocalDate' )){ _%>
import { DatePipe } from '@angular/common';
<%_ } _%>

@Component({
    selector: '<%= jhiPrefixDashed %>-<%= entityFileName %>',
    templateUrl: './<%= entityFileName %>.component.html'
})
export class <%= entityAngularName %>Component implements OnInit, OnDestroy<% if (pagination !== 'no') { %>, AfterViewInit<% } %> {
    <%= entityInstancePlural %>: I<%= entityAngularName %>[];
    eventSubscriber: Subscription;
    <%_ if (pagination !== 'no') { _%>
    totalItems: number;
    itemsPerPage: number;
    loading: boolean;
<%_ for ( idx in fields ) {
    if ( jpaMetamodelFiltering) {
        if(['LocalDate', 'Instant', 'ZonedDateTime'].includes(fields[idx].fieldType)){ _%>
        <%= fields[idx].fieldName %>Range: Date[];
        <%_ } else if(fields[idx].fieldIsEnum) {_%>
        // this to be removed once dropdown, multiselect... support optionValue
        <%= fields[idx].fieldName %>Options = <%= fields[idx].fieldTypeUnderscoreCapitalized %>_ARRAY.map(s => ({ label: s.toString(), value: s }));;
        <%_ } _%>
    <%_ } _%>
<%_ } _%>

    @ViewChild('<%= entityInstance %>Table')
        <%= entityInstance %>Table: Table;
    <%_ } _%>

    constructor(
        protected <%= entityInstance %>Service: <%= entityAngularName %>Service,
        protected jhiAlertService: JhiAlertService,
        <%_ if (fieldsContainBlob) { _%>
        protected dataUtils: JhiDataUtils,
        <%_ } _%>
        <%_ if (pagination !== 'no') { %>
        protected activatedRoute: ActivatedRoute,
        protected router: Router,
        <%_ } _%>
        protected eventManager: JhiEventManager,
        protected confirmationService: ConfirmationService,
        protected translateService: TranslateService,
        <%_ if(fields.some(f => f.fieldType === 'LocalDate' )){ _%>
        protected datePipe: DatePipe,
        <%_ } _%>
    ) {
        <%_ if (pagination !== 'no') { %>
        this.itemsPerPage = ITEMS_PER_PAGE;
        this.loading = true;
        <%_ } _%>
        <%_ if (searchEngine === 'elasticsearch') { _%>
        this.currentSearch = this.activatedRoute.snapshot && this.activatedRoute.snapshot.params['search'] ?
            this.activatedRoute.snapshot.params['search'] : '';
        <%_ } _%>
    }

    ngOnInit() {
        <%_ if (pagination === 'no') { %>
        this.loadAll();
        <%_ } _%>
        this.registerChangeIn<%= entityClassPlural %>();
    }

    ngOnDestroy() {
        this.eventManager.destroy(this.eventSubscriber);
    }

    <%_ if (pagination === 'no') {  _%>
    loadAll() {
        <%_ if (searchEngine === 'elasticsearch') { _%>
        if (this.currentSearch) {
            this.<%= entityInstance %>Service.search({
                query: this.currentSearch,
                }).pipe(
                    filter((res: HttpResponse<I<%= entityAngularName %>[]>) => res.ok),
                    map((res: HttpResponse<I<%= entityAngularName %>[]>) => res.body),
                ).subscribe(
                    (res: I<%= entityAngularName %>[]) => this.<%= entityInstancePlural %> = res,
                    (res: HttpErrorResponse) => this.onError(res.message)
                );
            return;
        }
        <%_ } _%>
        this.<%= entityInstance %>Service.query().pipe(
            filter((res: HttpResponse<I<%= entityAngularName %>[]>) => res.ok),
            map((res: HttpResponse<I<%= entityAngularName %>[]>) => res.body),
        ).subscribe(
            (res: I<%= entityAngularName %>[]) => {
                this.<%= entityInstancePlural %> = res;
            <%_ if (searchEngine === 'elasticsearch') { _%>
                this.currentSearch = '';
            <%_ } _%>
            },
            (res: HttpErrorResponse) => this.onError(res.message)
        );
    }
    <%_ } else { _%>
    ngAfterViewInit() {
        this.activatedRoute.queryParams
            .pipe(
                debounceTime(300),
                map(data => (<any>unflatten(data)).lle || {})
            )
            .subscribe(event => {
                Object.assign(this.<%= entityInstance %>Table, event);
            <%_ if(jpaMetamodelFiltering) { _%>
                <%_ for ( idx in fields ) {
                    if (['LocalDate', 'Instant', 'ZonedDateTime'].includes(fields[idx].fieldType) ) { _%>
                // once data type string works with range no need for this: https://github.com/primefaces/primeng/issues/7758
                this.<%= fields[idx].fieldName %>Range = event.filters && event.filters.<%= fields[idx].fieldName %> && event.filters.<%= fields[idx].fieldName %>.value &&
                    event.filters.<%= fields[idx].fieldName %>.value.map(x => new Date(x));
                    <%_ } else if (fields[idx].fieldType === 'Boolean') { _%>
                if (event.filters && event.filters.<%= fields[idx].fieldName %>) {
                    this.<%= entityInstance %>Table.filters.<%= fields[idx].fieldName %>.value = event.filters.<%= fields[idx].fieldName %>.value === 'true';
                }
                    <%_ } _%>
                <%_ } _%>
            <%_ } _%>
                this.loadPage(event);
            });
    }

    loadPage(event: LazyLoadEvent) {
        const params = lazyLoadEventToQueryParams(event);
        this.loading = true;
        <%_ if (searchEngine === 'elasticsearch') { _%>
        if (this.currentSearch) {
            this.<%= entityInstance %>Service
                .search(params)
                .subscribe(
                    (res: HttpResponse<I<%= entityAngularName %>[]>) => {
                        this.paginate<%= entityClassPlural %>(res.body, res.headers);
                        this.loading = false;
                    },
                    (res: HttpErrorResponse) => {
                        this.onError(res.message);
                        this.loading = false;
                    }
                );
            return;
        }
        <%_ } _%>
        this.<%= entityInstance %>Service
            .query(params)
            .pipe(
                filter((res: HttpResponse<I<%= entityAngularName %>[]>) => res.ok)
            ).subscribe(
                (res: HttpResponse<I<%= entityAngularName %>[]>) => {
                    this.paginate<%= entityClassPlural %>(res.body, res.headers);
                    this.loading = false;
                },
                (res: HttpErrorResponse) => {
                    this.onError(res.message);
                    this.loading = false;
                }
            );
    }

    onLazyLoadEvent(event: LazyLoadEvent) {
        const queryParams = flatten({lle: event});
        Object.entries(queryParams).forEach(
            ([key, value]) => {
                if (value && typeof (value) === 'object' && Object.entries(value).length === 0) {
                    delete queryParams[key];
                }
            }
        );
        this.router.navigate(['/<%= entityUrl %>'], {
            queryParams
        });
    }
    <%_ } _%>

    delete(id: number) {
        this.confirmationService.confirm({
            header: this.translateService.instant('entity.delete.title'),
            message: this.translateService.instant('primengtestApp.<%= entityInstance %>.delete.question', {id}),
            accept: () => {
                this.<%= entityInstance %>Service.delete(id).subscribe(() => {
                    this.eventManager.broadcast({
                        name: '<%= entityInstance %>ListModification',
                        content: 'Deleted an <%= entityInstance %>'
                    });
                });
            }
        });
    }

    trackId(index: number, item: I<%= entityAngularName %>) {
        return item.id;
    }
    <%_ if (fieldsContainBlob) { _%>

    byteSize(field) {
        return this.dataUtils.byteSize(field);
    }

    openFile(contentType, field) {
        return this.dataUtils.openFile(contentType, field);
    }
    <%_ } _%>
    <%_
    let eventCallBack = 'this.loadAll()';
    if (pagination !== 'no') {
        eventCallBack = 'this.'+entityInstance+'Table.ngOnInit()';
    } _%>

    registerChangeIn<%= entityClassPlural %>() {
        this.eventSubscriber = this.eventManager.subscribe('<%= entityInstance %>ListModification', (response) => <%= eventCallBack %>);
    }
    <%_ if (pagination !== 'no') { _%>
        <%_ if (pagination === 'pagination' || pagination === 'pager') { _%>

    protected paginate<%= entityClassPlural %>(data: I<%= entityAngularName %>[], headers: HttpHeaders) {
        <%_ if (databaseType !== 'cassandra') { _%>
        this.totalItems = parseInt(headers.get('X-Total-Count'), 10);
        <%_ } _%>
        this.<%= entityInstancePlural %> = data;
    }
        <%_ } else if (pagination === 'infinite-scroll') { _%>

    protected paginate<%= entityClassPlural %>(data: I<%= entityAngularName %>[], headers: HttpHeaders) {
        this.totalItems = parseInt(headers.get('X-Total-Count'), 10);
        for (let i = 0; i < data.length; i++) {
            this.<%= entityInstancePlural %>.push(data[i]);
        }
    }
    <%_ }} _%>

    protected onError(errorMessage: string) {
        this.jhiAlertService.error(errorMessage, null, null);
    }
    <%_ if(jpaMetamodelFiltering && fields.some(f => ['LocalDate', 'Instant', 'ZonedDateTime'].includes(f.fieldType) )){ _%>

    onDateSelect(dateRange: Date[], column: string, time = false) {
        // once data type string works with range no need for this: https://github.com/primefaces/primeng/issues/7758
        const dateToString =  time ? (x => x && x.toISOString()) : (x => x && this.datePipe.transform(x, 'yyyy-MM-dd'));
        if (dateRange) {
            this.<%= entityInstance %>Table.filter(dateRange.map(dateToString), column, 'between');
        } else {
            this.<%= entityInstance %>Table.filter(undefined, column, undefined);
        }
    }
    <%_ } _%>
}
